함수
    코드를 재사용 가능한 블록을 생성하는데 사용하거나 
        구조를 관리하기 쉽게 묶어놓은 묶음

    
코드 : 
    function 함수이름(매개변수) {
        실행될 문장
    }

    function greet(name) {
        consol.log(`안녕, #{name}!`);
    }

작성해준 함수는 호출해서 사용(fucntion Call)

함수명(파라미터 안에 들어갈 값 작성);
 greet("kh 학생");


 반환값(return) : 어떤 계산이나 결과에 대한 값을 반환
    undefined : 반환값이 없을때는 undefined가 반환됨

    fucntion 함수명(매개변수){
        return 반환될 값;
    }

    fucntion add(a,b){
        return a + b;

    }




    const result = add(5,3); // 결과로 8의 값이 저장됨


    (매개변수) => 표현할 식
 'click', () => {}
매개변수가 하나인 경우에는 괄호 생략이 가능
(매개변수) = > {
    //여러 표현식이 존재 

}


표현식이 여러개 일 경우 {} 사용해서 여러표현식을 묶어줘야 함


1. 화살표를 사용하지 않을 때
    function add(a,b) {
        return a +b;

    }


2. 화살표를 사용해서 나타낼 때
    const add = (a,b) => a + b;


3. 매개변수가 하나일 경우
    const one = a => a * a;

'click' () = > {
    buttonB.setAttribute('disabled',true);
    buttonA.removeAttribute('disabled');
}
    



java 컴파일 언어 
    컴퓨터로 사용자가 작성한 내용 번역 컴퓨터가 읽을 수 있게 변환





java 가 javascript 보다 빠름 





javascript 인터프리터언어
        